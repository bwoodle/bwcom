name: Publish Static website to Test Environment

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]

jobs:
  deploy-test-infra:
    name: Deploy Test environment infrastructure with CDK
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Setup dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'
      - name: Install dependencies
        working-directory: ./bwcom-cdk
        run: dotnet restore src
      - name: Build CDK
        working-directory: ./bwcom-cdk
        run: dotnet build src

      - name: Set AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy BwcomTest
        working-directory: ./bwcom-cdk
        run: |
          npm install -g aws-cdk
          cdk deploy TestDeployment --require-approval never

  angular-app:
    name: Build and Deploy Angular app to Test environment
    needs: deploy-test-infra
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
      - run: npm ci
        working-directory: ./bwcom-static
      - run: npm run build
        working-directory: ./bwcom-static
      - run: npm run test-headless
        working-directory: ./bwcom-static
          
      - name: Set AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Copy files to the test website with the AWS CLI
        run: |
          aws s3 sync ./bwcom-static/dist/bwcom/browser s3://test.brentwoodle.com

      - name: Invalidate CloudFront Cache
        run: |
          distro=$(aws ssm get-parameter --name "/bwcom/test/distribution-id" --query "Parameter.Value" --output text)
          aws cloudfront create-invalidation --distribution-id $distro --paths '/*'

      - name: Update Version
        run: |
          sha=$(git rev-parse --short ${{ github.sha }})
          aws ssm put-parameter --name "/bwcom/test/version" --value $sha --type String